<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[[Hexo 博客插件系列-03] 博客备份 hexo-git-backup]]></title>
    <url>%2Fpost%2Fb96cbb80.html</url>
    <content type="text"><![CDATA[首先呢, 不用插件也是可以备份的, 自己手动在 github 上新建一个私有库, 用来备份即可. 每次修改完博客配置, 或者新建修改文章之后, 都需要手动提交同步到 github 上. 用插件的好处就是, 可以直接在控制台一行命令提交同步, 方便了许多. 插件来源: https://github.com/coneycode/hexo-git-backup 插件安装 1npm install hexo-git-backup --save 如果你的 hexo 版本是 2.x.x, 则需要安装低版本, npm install hexo-git-backup@0.0.91 --save; 在博客配置文件 _config.yml 中添加: 123456backup: type: git theme: next,... message: update xxx repository: github: git@github.com:xxx/xxx.git,branchName 配置中可以设置提交时的信息(message); 也可以指定一起备份的主题(支持多个, 逗号分隔); repository 也可以指定多个地方进行同步备份; 网上说的比较多的是将备份放到博客项目的一个分支里, 即将上面的 branchName 设置成分支名称, git 路径与博客项目 github用户名.github.io 一致;首先呢, github 上要用 pages 功能, 必须是 public 或者开通 pro 的 private, 有条件的开通 pro, 然后将博客项目设置成私有的, 这个方法还是可以的;但是像阁主这种比较穷的, 还是建议, pages 还是公开 public 的, 备份的另起一个私有项目进行备份. 原因呢, 是因为博客底下有许多账号的 ID 设置, 私人信息比较多, 如果公开出去还是很麻烦的一件事情滴~大家还是要斟酌一二的~ 在命令行中执行 1hexo backup 这里需要注意的是, 如果原先是通过手动方式进行的备份, 即没有使用插件, 此时再用插件备份是会出错的. 解决方法是将博客目录下的 .git 目录删除, 再执行 hexo backup 命令; 最后, 祝你的博客永远不丢失~凉凉~ 后记: 阁主在家写完这篇文章, 然后赶着上班就匆匆的执行了 hexo backup, 本以为就可以提交到 github 上了, 然而去了公司一同步下来才发现, 并木有…这就尴尬了, 秒打脸呀. 最后还是切回手动备份吧.]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>插件</tag>
        <tag>备份</tag>
        <tag>hexo-git-backup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jupyterlab 自定义快捷键]]></title>
    <url>%2Fpost%2F5787df67.html</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223&#123; "runmenu:run-all": &#123; "command": "runmenu:run-all", "keys": ["Ctrl Shift Alt A"], "selector": "[data-jp-code-runner]", "title": "Run All", "category": "Run Menu" &#125;, "notebook:run-all-above": &#123; "command": "notebook:run-all-above", "keys": ["Ctrl Shift Alt B"], "selector": "[data-jp-code-runner]", "title": "Run All Above", "category": "Run Menu" &#125;, "runmenu:restart-and-run-all": &#123; "command": "runmenu:restart-and-run-all", "keys": ["Ctrl Shift Alt S"], "selector": "[data-jp-code-runner]", "title": "Restart Kernel and Run All", "category": "Run Menu" &#125;&#125; 代码中的 id 可参考 https://github.com/jupyterlab/jupyterlab/blob/master/packages/notebook-extension/src/index.ts 效果如下图所示:]]></content>
      <categories>
        <category>FAQ</category>
      </categories>
      <tags>
        <tag>jupyterlab</tag>
        <tag>python</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[LeetCode-py-0003] Longest Substring Without Repeating Characters]]></title>
    <url>%2Fpost%2F533ccb7d.html</url>
    <content type="text"><![CDATA[原文Given a string, find the length of the longest substring without repeating characters. Example 1: 123Input: &quot;abcabcbb&quot;Output: 3 Explanation: The answer is &quot;abc&quot;, with the length of 3. Example 2: 123Input: &quot;bbbbb&quot;Output: 1Explanation: The answer is &quot;b&quot;, with the length of 1. Example 3: 1234Input: &quot;pwwkew&quot;Output: 3Explanation: The answer is &quot;wke&quot;, with the length of 3. Note that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring. 翻译]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test]]></title>
    <url>%2Fpost%2Fd87f7e0c.html</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[Windows 添加 VSCode 右键菜单]]></title>
    <url>%2Fpost%2Feee682a1.html</url>
    <content type="text"><![CDATA[阁主在安装 VSCode 的时候手残, 取消了添加右键菜单的功能, VSCode 默认会添加两个右键菜单, 一个是打开文件的时候以 VSCode 方式打开, 一个是将当前文件夹作为工作目录在 VSCode 中打开, 用着用着发觉还是很实用的, 可是悔不当初没有安装啊~ 现在该如何恢复这两个很实用的右键菜单呢? 在 Windows 操作系统下, 自然是去修改注册表. 但是一般人操作注册表都是一脸懵逼, 导出搜索如何修改注册表, 去哪里修改注册表的, 很麻烦.于是阁主整理了一下注册表内容, 你们只要复制粘贴到一个 文件.reg 里, 然后双击确定导入注册表即可~拿走不谢o(￣︶￣)o 123456789101112131415Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode]@=&quot;Open VSCode Here&quot;&quot;Icon&quot;=&quot;[Microsoft VS Code - Code.exe]&quot;[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode\command]@=&quot;[Microsoft VS Code - Code.exe] .&quot;[HKEY_CLASSES_ROOT\Directory\shell\VSCode]@=&quot;Open with VSCode&quot;&quot;Icon&quot;=&quot;[Microsoft VS Code - Code.exe]&quot;[HKEY_CLASSES_ROOT\Directory\shell\VSCode\command]@=&quot;[Microsoft VS Code - Code.exe] %1&quot; 注意, 代码中的 [Microsoft VS Code - Code.exe] 部分, 要根据你实际的 VSCode 安装路径进行设置, 你可以利用 Everything 等一些软件查找 Code.exe 文件所在路径, 然后放到这里. 以阁主本地为例是 C:\\Users\\Memento\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe; 其中前两个是在文件夹的背景中右键菜单里的 Open VScode here, 即以当前目录作为工作空间, 在 VSCode 中打开;后两个是在文件的右键菜单中 Open with VSCode, 即当前文件以 VSCode 的方式打开; Share it~]]></content>
      <categories>
        <category>FAQ</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
        <tag>右键菜单</tag>
        <tag>Open VSCode here</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Hexo 博客系列-00] 基础安装部署教程]]></title>
    <url>%2Fpost%2F3f9a8db3.html</url>
    <content type="text"><![CDATA[1. 前言加了几个 Hexo 的技术讨论群, 经常可以讨论一些 hexo 的技巧和解决一些问题, 挺好的. 这些群号会在文末进行分享, 当然也有一个是阁主想搭建并长期维护和分享的 Hexo 技术讨论群, 欢迎大家的加入~ 这段期间里, 在群里偶尔会遇见一些没有开发经验的人, 他们也想要搭建起一个自己的博客平台, 分享自己的知识总结, 所见所闻. 但是对于 hexo 的安装配置过程总是遇见或这或那的问题, 网上查询解决办法也是磕磕绊绊的, 总结就两个字: 郁闷(＃￣～￣＃) 本来阁主是在维护一个 Hexo 博客系列 的, 里面的内容主要想介绍一些基本设置, 插件安装使用, 主题深度定制的内容的, 没想着再去写一篇基础的安装部署教程的, 因为阁主在安装部署的时候, 可以从网上找到一箩筐的安装部署教程, 虽然参差不齐, 但好在量多, 同时参考一两篇, 阁主原以为搞定这些还是不成问题的. 但是~还是从网友那里发现了这样那样的问题, 而且网上也不容易搜索到相对应的解决方法. 所以阁主在这里补上这第 00 篇的教程~ 烦请不吝赐教. 2. 前提首先呢, 如果是个真小白, 就是不会编程, 不会前端, 不会这, 不会那的, 阁主一万个建议你规规矩矩选择 NexT 主题, 为啥嘞, 因为其有一个靠得住的团队支持, 再因为就是网上资源多, 最后因为用的人多帮你的人也就多~当然, 这个主题还是不错的, 提供了四种模板可供选择, 如果你强行坚持使用其他主题, 阁主的系列文章你只能当做参考喽~祝君好运!!! 3. 正文3.1. 准备工作]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>新手</tag>
        <tag>小白</tag>
        <tag>攻略</tag>
        <tag>安装</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Hexo 博客插件系列-04] 3D标签云 svg3dtagcloud]]></title>
    <url>%2Fpost%2Fdcfce0c7.html</url>
    <content type="text"><![CDATA[效果图 安装该实现主要是基于一个 JQuery 插件工具, 叫 SVG 3D Tag Cloud jQuery plugin, 官网可以参考: jquery-svg3dtagcloud-plugin. 先下载它的 js 脚本文件 jquery.svg3dtagcloud.min.js, 放到 /themes/next/source/js/src 目录下; 在 /themes/next/layout/_scripts/ 目录下添加模板文件 svg3dtagcloud.swig, 代码如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445&#123;% if site.tags.length &gt; 1 %&#125; &lt;script src="/js/src/jquery-2.1.1.min.js"&gt;&lt;/script&gt; &lt;script src="/js/src/jquery.svg3dtagcloud.min.js"&gt;&lt;/script&gt; &lt;div id="tag-cloud" style="border-top: 1px grey solid; margin-top: 50px;overflow-x: auto;"&gt;&lt;/div&gt; &lt;script&gt; function init_3d_tag_cloud()&#123; var entries = [] var tagsstr = '&#123;% for tag in site.tags %&#125;entries.push(&#123;label: "&#123;&#123; tag.name &#125;&#125;", url: "&#123;&#123; url_for(tag.path) &#125;&#125;", target: "_top"&#125;);&#123;% endfor %&#125;' eval(tagsstr) var settings = &#123; entries: entries, width: 480, // 宽度 height: 480, // 高度 radius: '65%', radiusMin: 75, bgDraw: false, // 是否显示背景 bgColor: '#888', // 背景颜色 opacityOver: 1.00, opacityOut: 0.05, opacitySpeed: 1, fov: 800, speed: 2, // 旋转的速度 fontFamily: 'Oswald, Arial, sans-serif', fontSize: '18', // 默认字体大小 fontColor: '#8B4513', // 默认字体颜色 fontWeight: 'normal', // bold fontStyle: 'normal', // italic fontStretch: 'normal', // wider, narrower, ultra-condensed, extra-condensed, condensed, semi-condensed, semi-expanded, expanded, extra-expanded, ultra-expanded fontToUpperCase: false, tooltipFontFamily: 'Oswald, Arial, sans-serif', tooltipFontSize: '11', tooltipFontColor: 'red', tooltipFontWeight: 'normal', // bold tooltipFontStyle: 'normal', // italic tooltipFontStretch: 'normal', // wider, narrower, ultra-condensed, extra-condensed, condensed, semi-condensed, semi-expanded, expanded, extra-expanded, ultra-expanded tooltipFontToUpperCase: false, tooltipTextAnchor: 'left', tooltipDiffX: 0, tooltipDiffY: 10, &#125;; $('#tag-cloud').svg3DTagCloud(settings); &#125; init_3d_tag_cloud(); &lt;/script&gt;&#123;% endif %&#125; 代码中的 settings 参数可以参考上面提供的官网上的说明使用; 最后需要在 tags 页面中某个位置载入上面定义的模板文件, 在 &lt;div class=&quot;tag-cloud&quot;&gt;...&lt;/div&gt; 标签内部最底下加入如下代码即可: 123&#123;% block svg3dtagcloud %&#125; &#123;% include '_scripts/svg3dtagcloud.swig' %&#125;&#123;% endblock %&#125; 最后看一下阁主的标签页效果: 心动不如行动, 赶快自己动手搞一个吧~]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>插件</tag>
        <tag>3D标签云</tag>
        <tag>svg3dtagcloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[LeetCode-py-0002] Add Two Numbers]]></title>
    <url>%2Fpost%2Fef888847.html</url>
    <content type="text"><![CDATA[原文You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.You may assume the two numbers do not contain any leading zero, except the number 0 itself. Example: 123Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)Output: 7 -&gt; 0 -&gt; 8Explanation: 342 + 465 = 807. 翻译给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。您可以假设除了数字 0 之外，这两个数都不会以 0 开头。 示例： 123输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)输出：7 -&gt; 0 -&gt; 8原因：342 + 465 = 807 分析先定义节点类: 12345# Definition for singly-linked list.class ListNode: def __init__(self, x): self.val = x self.next = None 方法一最笨的方法就是, 把每个链表分别求出对应代表的非负整数, 然后求和, 最后把结果再转换为倒序链表; 12345678910111213141516171819202122def addTwoNumbers1(self, l1: ListNode, l2: ListNode) -&gt; ListNode: n = 0 index = 1 cur = l1 while cur is not None: n += cur.val * index index *= 10 cur = cur.next cur = l2 index = 1 while cur is not None: n += cur.val * index index *= 10 cur = cur.next res = ListNode(0) cur = res while n &gt; 0: n, cur.val = divmod(n, 10) if n &gt; 0: cur.next = ListNode(0) cur = cur.next return res 链表转整数, 是依次乘以 $10^n$, n 表示链表索引, 并累加;整数转链表则是依次除以 10, 每次余数即为链表对应值, 整数部分继续按前面的操作; 方法二按照人计算习惯, 对两个链表进行逐位求和, 并除以 10 求整数部分和余数部分, 余数部分即为本位值, 整数部分则为进位值, 在下一位计算时优先加上进位值; 1234567891011121314151617181920def addTwoNumbers2(self, l1: ListNode, l2: ListNode) -&gt; ListNode: cur1 = l1 cur2 = l2 n = 0 cur = res = ListNode(0) while True: cur.val += n if cur1 is not None: cur.val += cur1.val cur1 = cur1.next if cur2 is not None: cur.val += cur2.val cur2 = cur2.next n, cur.val = divmod(cur.val, 10) if n &gt; 0 or cur1 is not None or cur2 is not None: cur.next = ListNode(0) cur = cur.next else: break return res 方法三采用递归的方式, 实际上是将方法二的循环转换为递归实现;其中需要注意的一点是, 如果存在进位情况, 要先将进位值 n 作为链表, 加到其中一个子链表中; 1234567891011121314def addTwoNumbers3(self, l1: ListNode, l2: ListNode) -&gt; ListNode: res = ListNode(0) if l1 is not None: res.val += l1.val if l2 is not None: res.val += l2.val n, res.val = divmod(res.val, 10) next_l1 = None if l1 is None else l1.next next_l2 = None if l2 is None else l2.next if n &gt; 0: next_l1 = self.addTwoNumbers3(ListNode(n), next_l1) if next_l1 is not None or next_l2 is not None: res.next = self.addTwoNumbers3(next_l1, next_l2) return res 方法四与方法二一样, 只是美化了一下实现;代码中直接使用两个参数指针, 只初始化了一个结果指针;而且将对进位值(0/1)的判断, 移到下一轮循环中(val1+val2+carry)直接相加, 不用再进行判断; 12345678910111213def addTwoNumbers4(self, l1: ListNode, l2: ListNode) -&gt; ListNode: res = ListNode(0) res_cur = res carry = 0 while l1 or l2 or carry: val1 = (l1.val if l1 else 0) val2 = (l2.val if l2 else 0) carry, out = divmod(val1 + val2 + carry, 10) res_cur.next = ListNode(out) res_cur = res_cur.next l1 = (l1.next if l1 else None) l2 = (l2.next if l2 else None) return res.next 对比 方法 时间复杂度 空间复杂度 方法一 $O(m + n + max(m,n))$ $O(max(m,n))$ 方法二 $O(max(m,n))$ $O(max(m,n))$ 方法三 $O(max(m,n))$ $O(max(m,n))$ 方法四 $O(max(m,n))$ $O(max(m,n))$ 代码LeetCode-py]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[LeetCode-py-0001] Two Sum]]></title>
    <url>%2Fpost%2F16695df5.html</url>
    <content type="text"><![CDATA[原文Given an array of integers, return indices of the two numbers such that they add up to a specific target.You may assume that each input would have exactly one solution, and you may not use the same element twice.Example: 123Given nums = [2, 7, 11, 15], target = 9,Because nums[0] + nums[1] = 2 + 7 = 9,return [0, 1]. 翻译给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。示例: 123给定 nums = [2, 7, 11, 15], target = 9因为 nums[0] + nums[1] = 2 + 7 = 9所以返回 [0, 1] 分析方法一首先最简单的就是穷举法, 拿第一个数和其他数求和判断, 然后再拿第二个和后面的其他数求和判断, 暴力代码如下: 123456789101112class Solution: def twoSum(self, nums: List[int], target: int) -&gt; List[int]: n = len(nums) for i in range(n): for j in range(i + 1, n): if i != j and nums[i] + nums[j] == target: return [i, j]if __name__ == '__main__': nums = [2, 7, 11, 15] print(Solution().twoSum(nums, 9)) 方法二另一种方式是利用字典, 将遍历过的数以 value:index 形式存入字典, 然后每次计算 target-value 的值是否在字典里, 如果在, 说明这两个数满足条件; 1234567def twoSum(self, nums: List[int], target: int) -&gt; List[int]: dic = &#123;&#125; for i in range(len(nums)): n = target - nums[i] if n in dic: return [dic[n], i] dic[nums[i]] = i 对比 方法 时间复杂度 空间复杂度 方法一 $O(n^2)$ $O(1)$ 方法二 $O(n)$ $O(n)$ 代码LeetCode-py]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Hexo 博客 FAQ 系列-01] warning LF will be replaced by CRLF in]]></title>
    <url>%2Fpost%2F7bf40deb.html</url>
    <content type="text"><![CDATA[在执行 hexo d 进行发布时, 总是出现 warning: LF will be replaced by CRLF in xxx 的警告信息. 对于有强迫的阁主来说是无法接受的, 于是去网上找了一下原因. 在执行 hexo d 发布时, 实际上是执行了 git 的提交发布, 而 git 的换行符检查功能(core.safecrlf)比较严格, 由于阁主是在 windows 系统下进行写作, 所以不考虑跨平台出现的不同换行符问题, 所以这里就要取消掉 git 默认的换行符检查警告设置: 1git config --global core.autocrlf false 从此, 天下太平了~]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Hexo 博客插件系列-02] 语雀 yuque-hexo]]></title>
    <url>%2Fpost%2F6f3f19b1.html</url>
    <content type="text"><![CDATA[插件来源于: https://github.com/x-cold/yuque-hexo 首先先安装插件: 123npm i -g yuque-hexo# ornpm i --save-dev yuque-hexo 注意, 需要安装全局的插件; 然后再 hexo 博客目录下的 package.json 文件中添加 语雀 的配置信息, 如下所示: 1234567891011121314&#123; "name": "your hexo project", "yuqueConfig": &#123; "postPath": "source/_posts/yuque", "cachePath": "yuque.json", "mdNameFormat": "title", "adapter": "hexo", "concurrency": 5, "baseUrl": "https://www.yuque.com/api/v2", "login": "yinzhi", "repo": "blog", "onlyPublished": false &#125;&#125; 配置解释如下表格: 参数名 含义 默认值 postPath 文档同步后生成的路径 source/_posts/yuque cachePath 文档下载缓存文件 yuque.json mdNameFormat 文件名命名方式 (title / slug) title adapter 文档生成格式 (hexo/markdown) hexo concurrency 下载文章并发数 5 baseUrl 语雀 API 地址 - login 语雀 login (group) - repo 语雀仓库短名称 - onlyPublished 只展示已经发布的文章 true slug 是语雀的永久链接名，一般是几个随机字母。repo 即语雀上要同步到 Hexo 的知识库名称;login 即登录 ID 标识, 鼠标移到右上角头像图标, 弹出框里即可看到;其他配置默认即可; 接着可以执行同步命令, 将语雀上指定知识库(repo)的文章同步到 hexo 博客中指定的位置(postPath): 1yuque-hexo sync 也可以执行清空命令, 清除从语雀上同步下来的文章: 1yuque-hexo clean 最后, 嗯, 讲白了就是将 语雀 上的文章 markdown 到 hexo 博客下面; 网上说的复杂一些的都是那些自动化部署发布啥的, 阁主不清楚, 暂时也没用到那些, 这里就不介绍了.对于不同主题和插件的 front-matter 配置, 该插件还有待完善, 期待进一步的开发, 毕竟, 语雀还是很好的一个文章编辑器.]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>插件</tag>
        <tag>语雀</tag>
        <tag>yuque-hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Hexo 博客插件系列-01] 相关文章之 hexo-related-popular-posts]]></title>
    <url>%2Fpost%2F4af0cb81.html</url>
    <content type="text"><![CDATA[效果图: 本文是以 NexT 主题为例, 其主题中自带该插件的配置, 其他主题大致类似, 可以自行更改; 安装插件 1npm install --save hexo-related-popular-posts 在 next 主题配置文件 _config.yml 中 123456789101112# Related popular posts# Dependencies: https://github.com/tea3/hexo-related-popular-postsrelated_posts: enable: true title: # custom header, leave empty to use the default one display_in_home: false params: maxCount: 5 #PPMixingRate: 0.0 #isDate: false #isImage: false #isExcerpt: false 然后执行 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s, 在浏览器上查看效果;]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>插件</tag>
        <tag>相关文章</tag>
        <tag>hexo-related-popular-posts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Hexo 博客系列-03] 博客优化]]></title>
    <url>%2Fpost%2Fd2aa0c0e.html</url>
    <content type="text"><![CDATA[修改字体加载源修改主题配置文件: 123456font: enable: true # Uri of fonts host, e.g. //fonts.googleapis.com (Default). host: //fonts.lug.ustc.edu.cn # 中科大 # //fonts.geekzu.org # 极客族 # //fonts.css.network # 捷速网络 香港 压缩资源: gulp安装 gulp 插件: 12npm install gulp -gnpm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp-imagemin gulp --save 在 Hexo 站点根目录下新建 gulpfile.js 脚本文件; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687var gulp = require('gulp');var minifycss = require('gulp-minify-css');var uglify = require('gulp-uglify');var htmlmin = require('gulp-htmlmin');var htmlclean = require('gulp-htmlclean');var imagemin = require('gulp-imagemin');var del = require('del');var Hexo = require('hexo');// 清除public文件夹gulp.task('clean', function () &#123; return del(['public/**/*']);&#125;);// 利用Hexo API 来生成博客内容, 效果和在命令行运行: hexo g 一样// generate html with 'hexo generate'var hexo = new Hexo(process.cwd(), &#123;&#125;);gulp.task('generate', function (cb) &#123; hexo.init().then(function () &#123; return hexo.call('generate', &#123; watch: false &#125;); &#125;).then(function () &#123; return hexo.exit(); &#125;).then(function () &#123; return cb() &#125;).catch(function (err) &#123; console.log(err); hexo.exit(err); return cb(err); &#125;)&#125;)// 压缩 public 目录 cssgulp.task('minify-css', function () &#123; return gulp.src('./public/**/*.css') .pipe(minifycss()) .pipe(gulp.dest('./public'));&#125;);// 压缩 public 目录 htmlgulp.task('minify-html', function () &#123; return gulp.src('./public/**/*.html') .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;).on('error', function(e)&#123; console.log(e); &#125;)) .pipe(gulp.dest('./public'))&#125;);// 压缩 public/js 目录 jsgulp.task('minify-js', function () &#123; return gulp.src('./public/**/*.js') .pipe(uglify()) .pipe(gulp.dest('./public'));&#125;);// 压缩public目录下的所有img： 这个采用默认配置gulp.task('minify-img', function () &#123; return gulp.src('./public/images/**/*.*') .pipe(imagemin()) .pipe(gulp.dest('./public/images'))&#125;)// 同上，压缩图片，这里采用了： 最大化压缩效果。gulp.task('minify-img-aggressive', function () &#123; return gulp.src('./public/images/**/*.*') .pipe(imagemin( [imagemin.gifsicle(&#123; 'optimizationLevel': 3 &#125;), imagemin.jpegtran(&#123; 'progressive': true &#125;), imagemin.optipng(&#123; 'optimizationLevel': 7 &#125;), imagemin.svgo()], &#123; 'verbose': true &#125;)) .pipe(gulp.dest('./public/images'))&#125;)// 执行顺序: 清除public目录 → 产生原始博客内容 → 执行压缩混淆gulp.task('build', gulp.series('clean', 'generate', gulp.parallel('minify-html', 'minify-css', 'minify-js', 'minify-img-aggressive')), function (cb) &#123; &#125;);gulp.task('default', gulp.series(['build'])) 然后每次执行 gulp 命令后就会自动执行 clean, generate, [同步执行相关压缩方法]… 资源压缩: neat安装 hexo-neat 插件: 1npm install --save hexo-neat 在博客配置文件中设置: 123456789101112131415161718# hexo-neatneat_enable: trueneat_html: # 不能跳过 .md/.swig 文件 enable: true exclude:neat_css: enable: true exclude: - '**/*.min.css'neat_js: enable: true mangle: true output: compress: exclude: - '**/*.min.js' - '**/jquery.fancybox.pack.js' - '**/index.js' 不过该插件查看其作者 github 上解释, 暂时不支持对图片的压缩, 所以阁主目前还是使用的 gulp 压缩. 博客 Github + Coding 双线部署分别在 Github 和 Coding(现移至腾讯云) 上新建博客的 pages 项目, 有不清楚的可以查看网上教程, 关于这方面网上教程讲解的还是比较详细的. 阁主这里主要讲解如何绑定自定义的域名(阿里云), 以及 Github 和 Coding 的 Pages 里的设置. Githubgithub 绑定域名比较简单, 在博客 source 根目录下放一个 CAME 文件, 里面写一行 memento.net.cn 自定义的域名, 到时候 hexo d 的时候一起上传发布.在 Pages 里的设置如下图所示即可: 最后, 在阿里云的域名解析设置里添加两条记录: 因为国内访问 github 的速度有些慢, 所以将解析线路改为了 境外; CodingCoding 在 pages 设置里, 需要绑定新域名设置如下图所示: 注意: 其中 SSL/TLS 安全证书的申请认证, 需要先将阿里云的域名解析设置里对 github 的境外解析先暂停掉, 否则会出现申请错误的异常. 一些常见的 Coding Pages 问题参考:Coding Pages 常见问题 SEO: 百度+Google+Bing 等待更新完善注意:对于百度搜索的自动链接提交, 如果浏览器安装了 Adblock Plus 等一些屏蔽广告的插件, 有可能会导致自动提交被拦截.]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Hexo 博客系列-04] 主题改造]]></title>
    <url>%2Fpost%2Fbc92e064.html</url>
    <content type="text"><![CDATA[修改文章底部带 # 的标签修改模板 /themes/next/layout/_macro/post.swig, 搜索 rel=&quot;tag&quot;&gt;#, 将 # 换成 &lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 网站运行时间在 themes/layout/_parrials/footer.swing 中添加: 代码12345678910111213141516171819202122232425262728&lt;span id="sitetime"&gt;&lt;/span&gt;&lt;script language=javascript&gt; function siteTime()&#123; window.setTimeout("siteTime()", 1000); var seconds = 1000; var minutes = seconds * 60; var hours = minutes * 60; var days = hours * 24; var years = days * 365; var today = new Date(); var todayYear = today.getFullYear(); var todayMonth = today.getMonth()+1; var todayDate = today.getDate(); var todayHour = today.getHours(); var todayMinute = today.getMinutes(); var todaySecond = today.getSeconds(); var t1 = Date.UTC(2018,06,07,12,00,00); // 设置建立网站的时间 var t2 = Date.UTC(todayYear,todayMonth,todayDate,todayHour,todayMinute,todaySecond); var diff = t2-t1; var diffYears = Math.floor(diff/years); var diffDays = Math.floor((diff/days)-diffYears*365); var diffHours = Math.floor((diff-(diffYears*365+diffDays)*days)/hours); var diffMinutes = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours)/minutes); var diffSeconds = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours-diffMinutes*minutes)/seconds); document.getElementById("sitetime").innerHTML=" 已运行"+diffYears+" 年 "+diffDays+" 天 "+diffHours+" 小时 "+diffMinutes+" 分钟 "+diffSeconds+" 秒"; &#125; siteTime();&lt;/script&gt; NexT 主题添加多字体 修改 /themes/next/source/css/_variables/base.styl 文件中的字体获取方法: 12345get_font_family(config) &#123; custom_family = hexo-config('font.' + config + '.family') // 在这里把引号去除 return custom_family is a 'string' ? unquote(custom_family) : null&#125; 再修改主题配置文件: 1234global: # external: true will load this font family from host. external: true family: "Consolas, 'Helvetica Neue', Helvetica, Arial" 注意, 其中 family 的设置，必须以 &quot; 包含，里面的字体名称如果含有空格，则用 &#39; 。两个顺序不能反了，否则生成的 index.html 中，有一部分引用该字体作为 url 时会出错，导致 gulp 压缩也会失败。 自定义样式文字增加背景色在 theme/next/source/css/_custom 中的 custom.styl 文件里增加: css12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455span#inline-yellow &#123; display:inline; padding:.2em .6em .3em; font-size:80%; font-weight:bold; line-height:1; color:#fff; text-align:center; white-space:nowrap; vertical-align:baseline; border-radius:0; background-color: #f0ad4e;&#125;// 颜色块-绿span#inline-green &#123; display:inline; padding:.2em .6em .3em; font-size:80%; font-weight:bold; line-height:1; color:#fff; text-align:center; white-space:nowrap; vertical-align:baseline; border-radius:0; background-color: #5cb85c;&#125;// 颜色块-蓝span#inline-blue &#123; display:inline; padding:.2em .6em .3em; font-size:80%; font-weight:bold; line-height:1; color:#fff; text-align:center; white-space:nowrap; vertical-align:baseline; border-radius:0; background-color: #2780e3;&#125;// 颜色块-紫span#inline-purple &#123; display:inline; padding:.2em .6em .3em; font-size:80%; font-weight:bold; line-height:1; color:#fff; text-align:center; white-space:nowrap; vertical-align:baseline; border-radius:0; background-color: #9954bb;&#125; 使用方式: 1234&lt;span id="inline-blue"&gt; 站点配置文件 &lt;/span&gt;&lt;span id="inline-purple"&gt; 主题配置文件 &lt;/span&gt;&lt;span id="inline-yellow"&gt; 站点配置文件 &lt;/span&gt;&lt;span id="inline-green"&gt; 主题配置文件 &lt;/span&gt; 下载按钮样式同样，在 theme/next/source/css/_custom 中的 custom.styl 文件里增加: 1234567891011121314a#download &#123; display: inline-block; padding: 0 10px; color: #000; background: transparent; border: 2px solid #000; border-radius: 2px; transition: all .5s ease; font-weight: bold; &amp;:hover &#123; background: #000; color: #fff; &#125;&#125; 使用方式: 1&lt;a id="download" href="https://git-scm.com/download/win"&gt;&lt;i class="fa fa-download"&gt;&lt;/i&gt;&lt;span&gt; Download Now&lt;/span&gt; &lt;/a&gt; 优化友链样式友链(links) 的样式文件在 themes\next\source\css\_common\components\sidebar\sidebar-blogroll.styl, 可以在此处修改样式。模板位于 themes\next\layout\_macro\sidebar.swig 文件中的 标记处。阁主博客的友链主要增加了以十二支为索引，以及友链的图标和说明。本文的友链模板即样式代码如下所示，读者可自行更改样式和模板，有不懂的可留言或右下角call阁主~ 模板部分1234567891011121314151617181920212223&#123;# Blogroll #&#125;&#123;% if theme.links %&#125;&lt;div class="links-of-blogroll motion-element &#123;&#123; "links-of-blogroll-" + theme.links_layout | default('inline') &#125;&#125;"&gt; &lt;div class="links-of-blogroll-title"&gt; &lt;i class="fa fa-fw fa-&#123;&#123; theme.links_icon | default('globe') | lower &#125;&#125;"&gt;&lt;/i&gt; &#123;&#123; theme.links_title &#125;&#125; &lt;/div&gt; &lt;ul class="links-of-blogroll-list"&gt; &#123;% for blogrollText, blogrollURL in theme.links %&#125; &lt;li class="links-of-blogroll-item"&gt; &#123;% set url = blogrollURL.split('||')[0] | trim %&#125; &#123;% set icon = blogrollURL.split('||')[1] | trim %&#125; &#123;% set comment = blogrollURL.split('||')[2] | trim | default(blogrollText) %&#125; &lt;a href="&#123;&#123;url&#125;&#125;" title="&#123;&#123;comment&#125;&#125;" rel="noopener" target="_blank"&gt; &lt;img src="&#123;&#123;icon&#125;&#125;" /&gt; &#123;&#123; blogrollText &#125;&#125; &lt;/a&gt; &#123;#&#123; next_url(blogrollURL, blogrollText, &#123;title: blogrollURL&#125;) &#125;#&#125; &lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt;&lt;/div&gt;&#123;% endif %&#125; 样式部分123456789101112131415161718192021222324252627282930313233343536373839.links-of-blogroll &#123; margin-top: 10px; font-size: 13px;&#125;.links-of-blogroll-title &#123; margin-top: 0; font-size: 14px; font-weight: $font-weight-bold;&#125;.links-of-blogroll-list &#123; margin: 0; padding: 0; list-style:cjk-earthly-branch;&#125;.links-of-blogroll-item &#123; padding: 2px 10px; text-align: left; margin: 15px; a, span.exturl &#123; max-width: 280px; box-sizing: border-box; overflow: hidden; white-space: nowrap; text-overflow: ellipsis; border-bottom: none; display: inline-table; &#125; img&#123; height: 35px; width: 35px; display: inline; vertical-align: middle; margin-right: 15px; &#125;&#125; 文章末尾结束标记在路径 \themes\next\layout\_macro 中新建 passage-end-tag.swig 文件,并添加以下内容： 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style="text-align:center;color: #ccc;font-size:14px;"&gt;-------------本文至此结束&lt;i class="fa fa-heartbeat"&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 接着打开 \themes\next\layout\_macro\post.swig 文件, 在 post-body 之后, post-footer 之前添加代码(post-footer之前两个DIV): 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'passage-end-tag.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt; 最后再主题配置文件中启用: 123# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true 文章底部版权信息+复制文本版权信息在 theme/next/layout/_macro/ 下增加文件 my-copyright.swig: 代码12345678910111213141516171819202122232425262728293031323334353637&#123;% if page.copyright %&#125; &lt;div class="my_post_copyright"&gt; &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href="&#123;&#123; url_for(page.path) &#125;&#125;"&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href="/" title="访问 &#123;&#123; theme.author &#125;&#125; 的个人博客"&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format("YYYY年MM月DD日 - HH:MM") &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format("YYYY年MM月DD日 - HH:MM") &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href="&#123;&#123; url_for(page.path) &#125;&#125;" title="&#123;&#123; page.title &#125;&#125;"&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class="fa fa-creative-commons"&gt;&lt;/i&gt; &lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" title="Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)"&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt; &lt;/div&gt; &lt;script&gt; function addLink() &#123; var body_element = document.body; var selection = window.getSelection(); var line1 = "原文出自[Memento 博客](https://memento1990.github.io/)"; var line2 = "除特别声明外，署名-非商业性使用-禁止演绎 4.0 国际"; var line3 = "转载请保留原文链接及作者: " + document.location.href; if (window.clipboardData) &#123; // Internet Explorer var copytext = selection + "\r\n\r\n" + line1 + "\n" + line2 + "\n" + line3; window.clipboardData.setData("Text", copytext); return false; &#125; else &#123; var copytext = selection + "&lt;br /&gt;&lt;br /&gt;" + line1 + "&lt;br /&gt;" + line2 + "&lt;br /&gt;" + line3; var newdiv = document.createElement('div'); newdiv.style.position = 'absolute'; newdiv.style.left = '-99999px'; body_element.appendChild(newdiv); newdiv.innerHTML = copytext; selection.selectAllChildren(newdiv); window.setTimeout(function () &#123; body_element.removeChild(newdiv); &#125;, 0); &#125; &#125; document.oncopy = addLink; &lt;/script&gt;&#123;% endif %&#125; 其中 div 部分，会在文章底部生成版权声明板块，script 脚本代码则是处理复制文章文本时，自动在复制内容下面追加版权声明内容; 然后在 theme/next/layout/_macro/post.swig 中增加该模块配置(在 END POST BODY 注释标记后即可): 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'my-copyright.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt;]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
        <tag>主题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Hexo 博客系列-02] 第三方插件]]></title>
    <url>%2Fpost%2F67805eb2.html</url>
    <content type="text"><![CDATA[聊天模块DaoVioce 注册首先需要在 DaoVoice 上注册个账号, 可以使用阁主的 邀请码: 160df6e7; 按下图所示获取 app_id; 修改 /themes/next/layout/_custom/head.swig: 123456789&#123;% if theme.daovoice %&#125;&lt;script&gt; (function(i,s,o,g,r,a,m)&#123;i["DaoVoiceObject"]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)&#125;)(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/0f81ff2f.js","daovoice") daovoice('init', &#123; app_id: "&#123;&#123;theme.daovoice_app_id&#125;&#125;" &#125;); daovoice('update');&lt;/script&gt;&#123;% endif %&#125; 最后在主题配置文件中启用并添加你自己的 app id: 123# online contactdaovoice: truedaovoice_app_id: 160df6e7 内容分享AddThis 前往 AddThis 注册一个账号, 注册的时候有一个 人机身份验证 的选项，需要翻墙才能刷新出来，不然会一直提示 reCAPTCHA verification failed. Please try again. 的注册失败提示！ 然后依次 Add a New Tool -&gt; Share Buttons 创建一个分享按钮，并按照下图所示进行样式设置: 选择分享按钮样式: 设置分享的 Services, Design, Counters, Position, Behavior: 最后 Activate Tool 激活工具即可使用; 在主题配置文件中启用: 123# AddThis Share, See: https://www.addthis.com# Go to https://www.addthis.com/dashboard to customize your tools.add_this_id: xxxxxxxxx 其中 add_this_id 可以如下图所示获取: 注意, 该插件在 Firefox 浏览器下失效, 提示 InvalidStateError: An attempt was made to use an object that is not, or is no longer, usable 异常. 评论模块ValineValine 诞生于2017年8月7日，是一款基于 Leancloud 的快速、简洁且高效的无后端评论系统。首先，前往 leancloud 注册一个账号, 接着需要创建一个应用，名称随意，然后进入 应用 - 设置 - 应用key 以获取 App ID 和 App Key: 在主题配置文件中启用 valine: 12345678910111213141516# Valine# You can get your appid and appkey from https://leancloud.cn# More info available at https://valine.js.orgvaline: enable: false # When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version. appid: xxxxxxxxxx # your leancloud application appid appkey: xxxxxxxxxx # your leancloud application appkey notify: true # mail notifier, See: https://github.com/xCss/Valine/wiki verify: false # Verification code placeholder: 留下你的爪印 # comment box placeholder avatar: mm # gravatar style guest_info: nick,mail,link # custom comment header pageSize: 10 # pagination size language: # language, available values: en, zh-cn visitor: true # leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors' for counter compatibility. Article reading statistic https://valine.js.org/visitor.html comment_count: true # if false, comment count will only be displayed in post page, not in home page 最后，记得在 LeanCloud - 设置 - 安全中心 - Web 安全域名 中将你博客的域名加入！！ 图为旧设置, 现域名变更为 http://memento.net.cn. gitment waiting for update… gitalk waiting for update… gitter waiting for update… LiveRe(来必应) waiting for update… 3D 标签云在上一步的基础上, 安装插件 npm install --save hexo-tag-cloud;然后在 /themes/next/layout/page.swig 定位到 &lt;div class=&quot;tag-cloud-tags&quot;&gt;...&lt;/div&gt;, 在该标签后面添加: 123456789101112&#123;% if site.tags.length &gt; 1 %&#125;&lt;script type="text/javascript" charset="utf-8" src="/js/tagcloud.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" charset="utf-8" src="/js/tagcanvas.js"&gt;&lt;/script&gt;&lt;div class="widget-wrap"&gt; &lt;h3 class="widget-title"&gt;Tag Cloud&lt;/h3&gt; &lt;div id="myCanvasContainer" class="widget tagcloud"&gt; &lt;canvas id="resCanvas" style="width:100%"&gt; &#123;&#123; list_tags() &#125;&#125; &lt;/canvas&gt; &lt;/div&gt;&lt;/div&gt;&#123;% endif %&#125; 最后再依次执行 hexo clean, hexo g, hexo s, 查看完成的 3D 标签云~ CNZZ 友盟统计 注册友盟账号并添加站点, 如下图所示: 查看图片 拷贝其中的统计代码: 查看图片 修改模板代码:定位到 /themes/next/layout/_third-party/analytics/cnzz-analytics.swig 模板文件, 修改中间的 &lt;script&gt; 脚本代码, 将第二步中复制的统计代码放进去: 123456&#123;% if theme.cnzz_siteid %&#125; &lt;div&gt; &lt;!-- 放置友盟的统计代码 --&gt; &lt;script type="text/javascript"&gt;...&lt;/script&gt; &lt;/div&gt;&#123;% endif %&#125; 在主题配置文件中启用 CNZZ 统计 12# CNZZ countcnzz_siteid: true 本地搜索参考: hexo-generator-searchdb 1npm install hexo-generator-searchdb --save 在博客配置文件中添加: 12345search: path: search.xml field: post format: html limit: 10000 然后在主题配置文件中启用本地查询: 配置1234567891011# Local search# Dependencies: https://github.com/theme-next/hexo-generator-searchdblocal_search: enable: true # If auto, trigger search by changing input. # If manual, trigger search by pressing enter key or search button. trigger: auto # Show top n results per article, show all results by setting to -1 top_n_per_article: 1 # Unescape html strings to the readable one. unescape: false 博文置顶参考: hexojs/hexo-generator-index hexo-generator-index-pin-top 解决Hexo置顶问题 卸载原装的 hexo-generator-index, 并安装 hexo-generator-index-pin-top: 12npm uninstall hexo-generator-index --savenpm install hexo-generator-index-pin-top --save 然后在文章中添加 top: 12345---title: 2018date: 2018-10-25 16:10:03top: 10--- top 值越大位置越靠前;设置置顶标记, 定位 /themes/next/layout/_macro/post.swig 的 &lt;div class=&quot;post-meta&quot;&gt; 标签下: 12345&#123;% if post.top %&#125; &lt;i class="fa fa-thumb-tack"&gt;&lt;/i&gt; &lt;font color=7D26CD&gt;置顶&lt;/font&gt; &lt;span class="post-meta-divider"&gt;|&lt;/span&gt;&#123;% endif %&#125; 字数统计+阅读时间参考: hexo-symbols-count-time 安装插件 1npm install hexo-symbols-count-time --save 在博客配置文件中启用: 12345symbols_count_time: symbols: true time: true total_symbols: true total_time: true 在主题配置文件中设置: 12345678# Post wordcount display settings# Dependencies: https://github.com/theme-next/hexo-symbols-count-timesymbols_count_time: separated_meta: true item_text_post: true item_text_total: false awl: 4 # Average Word Length (chars count in word). Default: 4. wpm: 275 # Words Per Minute. Default: 275. 文末嵌入网页地址 hexo-link参考: hexo-addlink 安装 1npm install hexo-addlink --save 在博客配置文件中进行设置: 123addlink: before_text: hello # text before the post link after_text: bye # text after the post link 文章链接持久化为了避免 Next 主题默认的以文章标题 title 作为链接的一部分, 导致的 url 地址的中文乱七八糟的问题, 现采用 hexo-abbrlink 插件, 根据一定的算法持久化文章链接; 安装插件 1npm install hexo-abbrlink --save 站点配置文件中设置: 1234permalink: :year/:month/:day/:abbrlink.htmlabbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex 同时, 也修改一下 scaffolds 里的模版文件 post.md, 删除默认的 permalink 行; 文章加密访问 安装插件: 1npm install --save hexo-blog-encrypt 在博客配置文件中启用，也可以配置样式模板: 文章加密123456789101112131415161718encrypt: enable: true default_abstract: the content has been encrypted, enter the password to read.&lt;/br&gt; default_message: Please enter the password to read. default_template: &lt;script src="//cdnjs.cloudflare.com/ajax/libs/jquery/1.11.3/jquery.min.js"&gt;&lt;/script&gt; &lt;div id="hbe-security"&gt; &lt;div class="hbe-input-container"&gt; &lt;input type="password" class="hbe-form-control" id="pass" placeholder="&#123;&#123;message&#125;&#125;" /&gt; &lt;label for="pass"&gt;&#123;&#123;message&#125;&#125;&lt;/label&gt; &lt;div class="bottom-line"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id="decryptionError" style="display:none;"&gt;&#123;&#123;decryptionError&#125;&#125;&lt;/div&gt; &lt;div id="noContentError" style="display:none;"&gt;&#123;&#123;noContentError&#125;&#125;&lt;/div&gt; &lt;div id="encrypt-blog" style="display:none"&gt; &#123;&#123;content&#125;&#125; &lt;/div&gt; 注意，该插件依赖于 jquery.min.js; 最后在写文章时头部设置密码即可: 12345---title: 2018date: 2018-10-25 16:10:03password: 123456--- NexT [hexo-theme-next: v7.0.1] 主题出现解密后 TOC 目录无法显示的问题修改模板文件: sidebar.swig主要修改的内容是对于 page.content 的调用, 当 page.encrypt == true 时, 应调用 page.origin; 当 page.encrypt == false 时, 则调用 page.content;具体的修改内容见下: { details 变更一 } 123&#123;% if display_toc and toc(page.content).length &gt; 1 %&#125; ...&#123;% endif %&#125; 变更为: 123&#123;% if display_toc and page.encrypt == true and toc(page.origin).length &gt; 1 or page.encrypt == false and toc(page.content).length &gt; 1 %&#125; ...&#123;% endif %&#125; { enddetails } 123&lt;div class="site-overview-wrap sidebar-panel&#123;% if not display_toc or toc(page.content).length &lt;= 1 %&#125; sidebar-panel-active&#123;% endif %&#125;"&gt; ...&lt;/div&gt; 变更为: 123&lt;div class="site-overview-wrap sidebar-panel&#123;% if not display_toc or page.encrypt == false and toc(page.content).length &lt;= 1 or page.encrypt == true and toc(page.origin).length &lt;= 1 %&#125; sidebar-panel-active&#123;% endif %&#125;"&gt; ...&lt;/div&gt; 123&#123;% if display_toc and toc(page.content).length &gt; 1 %&#125; ...&#123;% endif %&#125; 变更为: 123&#123;% if display_toc and page.encrypt == true and toc(page.origin).length &gt; 1 or page.encrypt == false and toc(page.content).length &gt; 1 %&#125; ...&#123;% endif %&#125; 图片懒加载安装插件: 1npm install hexo-lazyload --save 然后在博客配置文件中添加设置: 12345# 图片懒加载lazyload: enable: true # className: # 需要延迟加载的图片 class 选择器, 可选, e.g. .J-lazyload-img # loadingImg: # 图片未加载时的代替图, 可选 e.g. ./images/loading.png, 默认: /js/lazyload-plugin/loading.svg]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Hexo 博客系列-01] 基本设置]]></title>
    <url>%2Fpost%2F4f47e744.html</url>
    <content type="text"><![CDATA[侧边栏头像在主题配置文件 _config.yml 中编辑: 1avatar: [头像路径] 网站的 favicon(浏览器tab图标)在主题配置文件中设置: 12345678910# For example, you put your favicons into `hexo-site/source/images` directory.# Then need to rename &amp; redefine them on any other names, otherwise icons from Next will rewrite your custom icons in Hexo.favicon: #small: /images/favicon-16x16-next.png small: /images/Memento.ico medium: /images/favicon-32x32-next.png apple_touch_icon: /images/apple-touch-icon-next.png safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml 设置 分类、标签云、关于 等菜单页面在站点目录下分别执行: 123hexo new page "categories" # 新增分类hexo new page "tags" # 新增标签hexo new page "about" # 新增关于 可以在对应模块的 index.md 中添加 comments: false 来关闭评论功能;然后在主题配置文件 _config.yml 中打开对应模块的注释(或者自己手动添加): 123456menu: 首页: / || home 关于: /about/ || user 标签: /tags/ || tags 分类: /categories/ || th 归档: /archives/ || archive 显示分类/标签菜单项的内容量启用主题配置文件中的 menu_settings . badges 为 true: 1234# Enable/Disable menu icons / item badges.menu_settings: icons: true badges: true # 是否显示分类/标签/归档页的内容量 需要注意的是, next 主题在模板文件 menu-badge.swig 中写死的三个变量(archives, categories, tags): 1234567891011121314&#123;% macro render(name) %&#125; &#123;% set badges = &#123; archives: site.posts.length, categories: site.categories.length, tags: site.tags.length &#125; %&#125; &#123;% for menu, count in badges %&#125; &#123;% if name == menu %&#125; &lt;span class=&quot;badge&quot;&gt;&#123;&#123; count &#125;&#125;&lt;/span&gt; &#123;% endif %&#125; &#123;% endfor %&#125;&#123;% endmacro %&#125; 所以, 在主题配置文件 menu 的配置中, 1234567891011menu: 首页: / || home #分类: /categories/ || th tags: /tags/ || tags #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap 在线文档: /onlinedocs || file-o 友链申请: /申请友链 || plus archives: /archives/ || clock-o 关于: /about/ || user #commonweal: /404/ || heartbeat 关于 tags, categories, archives 三项的第一个值是不能修改的;如若要修改, 就要同步修改 menu-badges.swig 模板文件, 当然, 不支持中文…阁主泪奔~~o(&gt;_&lt;)o ~~ 博客背景 canvas_nest来源: theme-next-canvas-nest 在主题配置文件中配置脚本: 12canvas_nest: //cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1.0.0/canvas-nest.min.js canvas_nest_nomobile: //cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1.0.0/canvas-nest-nomobile.min.js 并启用: 1234567canvas_nest: enable: true onmobile: true # display on mobile or not color: "0,0,255" # RGB values, use ',' to separate opacity: 0.5 # the opacity of line: 0~1 zIndex: -1 # z-index property of the background count: 99 # the number of lines 博客的数据统计不蒜子在主题配置文件中启用: 12345678910# Show Views / Visitors of the website / page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzibusuanzi_count: enable: true total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eye 顶部进度条来源: theme-next-pace 将项目中的 css 和 js 文件下载放置到 /themes/next/source/lib/pace/ 目录下; 在主题配置文件中启用: 12345678# Progress bar in the top during page loading.# Dependencies: https://github.com/theme-next/theme-next-pacepace: true# Themes list:# pace-theme-big-counter | pace-theme-bounce | pace-theme-barber-shop | pace-theme-center-atom# pace-theme-center-circle | pace-theme-center-radar | pace-theme-center-simple | pace-theme-corner-indicator# pace-theme-fill-left | pace-theme-flash | pace-theme-loading-bar | pace-theme-mac-osx | pace-theme-minimalpace_theme: pace-theme-minimal 返回顶部 + 当前浏览进度在主题配置文件中启用: 123456back2top: enable: true # Back to top in sidebar. sidebar: true # Scroll percent label in b2t button. scrollpercent: true 右上角/左上角的 Fork me on github在主题配置文件中启用: 12345# Follow me on GitHub banner in right-top corner.github_banner: enable: true permalink: https://github.com/Memento1990 title: Follow me on GitHub 增加首页中的 “阅读全文” 按钮在主题配置文件中启用: 12345# Automatically Excerpt. Not recommend.# Use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt: enable: true length: 150 站点域名配置当然, 首先你得要有个域名, 阁主以 memento.net.cn 为例, 至于如何购买域名, 实名云云, 自己 google 解决, 有不懂的可以来找阁主~ 在 source 根目录下放置一个文件 CNAME, 注意 没有后缀名 的, 文件里就存一行 memento.net.cn 即可; 如此在 hexo d 发布项目时会把该文件也上传, 告知服务器(github or gitee) 自定义的域名是什么; 在博客配置文件中设置: 123456# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://memento.net.cn/root: /permalink: :year/:month/:day/:title/permalink_defaults: 接着在 Github 的博客项目 Settings 下配置, 将 Custom domain 设置成自己购买的域名: 域名的 DNS 解析可以参考阁主的, 阁主同时部署在 Github 和 Gitee 上, 所以设置了两组解析记录; a. 注意, coding 的 DNS 解析记录值为 pages.coding.me, 设置成 coding pages 里提供的域名也可以使用, 但是会出现其他一些问题, 所以还是按照 coding 官网说明的进行设置b. 注意, 其中 github 的解析线路均指向了 境外, 这样就可以将国内的解析到 coding, 国外的解析到 github 了.c. 注意, 如果先添加了 github 的 DNS 解析, 后再添加 coding 的 DNS 解析, 需要先将 github 的 DNS 解析先暂停, 这样在 coding 的 pages 中进行域名绑定时才会被通过, 否则会一直出现 SSL/TLS 安全证书的申请认证错误 问题 添加博客项目 README.md, 跳过渲染在博客配置文件中设置: 1skip_render: README.md 侧边栏显示近期文章列表在 /themes/next/layout/_custom/sidebar.swig 的自定义侧边栏文件模板中添加 近期文章列表 模块; 12345678910111213141516&#123;% if theme.recent_posts %&#125;&lt;div class="links-of-blogroll motion-element &#123;&#123; "links-of-blogroll-" + theme.recent_posts_layout &#125;&#125;"&gt; &lt;div class="links-of-blogroll-title"&gt; &lt;i class="fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;" aria-hidden="true"&gt;&lt;/i&gt; &#123;&#123; theme.recent_posts_title &#125;&#125; &lt;/div&gt; &lt;ul class="links-of-blogroll-list" style="list-style: square;"&gt; &#123;% set posts = site.posts.sort('-date') %&#125; &#123;% for post in posts.slice('0', '5') %&#125; &lt;li style="border-bottom: 1px solid #c1c5c1;"&gt; &lt;a href="&#123;&#123; url_for(post.path) &#125;&#125;" title="&#123;&#123; post.title &#125;&#125;" target="_blank" style="border-bottom: none;"&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt; &lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt;&lt;/div&gt;&#123;% endif %&#125; 代码是阁主写的? nonono, 很明显是从网上 copy 来的, 来源出处有很多, 所以就没有记录下来. 当然他们很懒的直接采用了 next 主题默认的友链侧边栏样式, o(╯□╰)o还没有完呢, 还需要在主题配置文件中添加配置: 123recent_posts_title: 近期文章recent_posts_layout: blockrecent_posts: true 效果图如下:]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>基本设置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win10 下打开 XShell 时提示缺少 mfc110.dll/msvcr110.dll]]></title>
    <url>%2Fpost%2F593abc75.html</url>
    <content type="text"><![CDATA[异常描述在 Win10 64 位中安装 XShell 后运行，提示缺少 mfc110.dll 和 msvcr110.dll; 解决方案安装 x86 库 VSU4vcredist_x86.exe: Visual C++ Redistributable for Visual Studio 2012 Update 4 vcredist_x86.exe]]></content>
      <categories>
        <category>FAQ</category>
      </categories>
      <tags>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[彻底禁止 Win10 系统自动更新]]></title>
    <url>%2Fpost%2F90bec697.html</url>
    <content type="text"><![CDATA[Windows Update 服务依次进入 控制面板 - 管理工具 - 服务 or win+R - services.msc, 找到 Windows Update 服务，双击打开属性后，将 启动类型 改为 禁用, 并停止当前的服务。 接着跳转到 恢复 页签，将 第一次失败 的 重新启动服务 修改为 无操作。 计划任务程序依次进入 控制面板 - 计划任务 - Microsoft - Windows - WindowUpdate, 将其中右侧中的所有触发全部禁用, 如下图: 注册表通过 win+r - regedit 进入注册表, 然后依次找到 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\DriverSearching, 将 SearchOrderConfig 的默认值 1 改为 0; 组策略通过 win+r - gpedit.msc 进入组策略, 然后依次找到 gpedit.msc - 计算机配置 - 管理模版 - 系统 - Internet 通信管理 - Internet 通信设置, 将其中的 关闭 Windows 更新设备驱动程序搜索 更改为已启用;]]></content>
      <categories>
        <category>FAQ</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>Windows10</tag>
        <tag>设置</tag>
        <tag>自动更新</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[文章汇总] Hexo 博客系列 [最近更新: 2019/04/24]]]></title>
    <url>%2Fpost%2F3943aa90.html</url>
    <content type="text"><![CDATA[一. 系列文章通道 [Hexo 博客系列-01] 基本设置 [最新更新: 2019-04-25] [Hexo 博客系列-02] 第三方插件 [最新更新: 2019-03-30] [Hexo 博客系列-03] 博客优化 [最新更新: 2019-03-30] [Hexo 博客系列-04] 主题改造 [最新更新: 2019-03-30] 插件系列文章 [Hexo 博客插件系列-01] 相关文章之 hexo-related-popular-posts [最新更新: 2019-04-13] [Hexo 博客插件系列-02] 语雀 yuque-hexo [最新更新: 2019-04-15] [Hexo 博客插件系列-03] 博客备份 hexo-git-backup [最新更新: 2019-04-25] [Hexo 博客插件系列-04] 3D标签云 svg3dtagcloud [最新更新: 2019-04-25] 二. 更新预览Update 2019-12-06 增加工信部备案链接; Update 2019-04-25 增加侧边栏中的近期文章模块; Update 2019-04-24 21:30:33 增加 tags/archives menu 的内容量显示; Update 2019-03-27 增加 CNZZ友盟统计 增加 3D 标签云 Update 2019-03-25 17:34 优化 友链样式 Update 2019-03-23 21:34 增加 聊天模块 DaoVioce 修复 NexT 主题添加多字体 增加 内容分享, AddThis 增加 评论模块 增加 文章底部版权信息+复制文本版权信息 修复 文章加密访问 增加 压缩资源: neat 增加 自定义样式 三. Hexo 相关知识点front-matter 参数 描述 默认值 layout 布局 title 标题 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） categories 分类（不适用于分页） permalink 覆盖文章网址 四. 参考 hexo 官网 NexT 主题 NexT 主题官网 hexo的next主题个性化教程：打造炫酷网站 【持续更新】最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析 Hexo Next 博客自定义配置 打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化 NexT 主题优化 主题配置]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>github</tag>
        <tag>文章汇总</tag>
      </tags>
  </entry>
</search>
